/* eslint-disable prefer-const */
import { app, BrowserWindow, ipcMain, Tray } from 'electron';
import lodash from 'lodash';
import { connectToServer } from './socketClient';
import { createTray } from './tray';

export let mainWindow: BrowserWindow | null = null;
let tray: Tray | null = null; // Move the tray to the top-level scope

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    show: false, // Don't show the window initially
  });
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.on('closed', function () {
    mainWindow = null;
  });

  // Show window when it is ready to
  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  connectToServer();

  createWindow();

  createTray(tray, mainWindow);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.on('message', async (event, arg) => {
  const msgTemplate = (pingPong: string) => `IPC test: ${pingPong}`;
  console.log('mainProcess', msgTemplate(arg));
  event.reply('message', msgTemplate('pong'));
});

ipcMain.on('update-setting', (event, setting: string[]) => {
  // 'setting' is an object that contains the setting name and value
  // Call Python API with the updated setting

  throttledApiCall(setting)
    .then((response: any) => {
      // You can also send a response back to the renderer if needed
      // event.reply('update-setting-response', response);
      console.log('api response: ', response);
    })
    .catch((error: any) => {
      console.error('Error calling Python API:', error);
    });
});

const throttledApiCall: (setting: any) => Promise<any> = lodash.throttle(
  callPythonAPI,
  2000
);

async function callPythonAPI(setting: any): Promise<string> {
  // Use a method to call your Python API here
  // This could be an HTTP request, a socket connection, or any other IPC mechanism
  return 'response';
}
